---
lookup_options:
  profile_lmod::directories:
    merge: "hash"
  profile_lmod::modules:
    merge: "deep"

profile_lmod::directories:
  "/usr/share/modulefiles/Core": {}
  "/usr/share/modulefiles/Site": {}

profile_lmod::modules:
  "/usr/share/modulefiles/Core/group_paths":
    data:
      content: |
        #%Module1.0####################################################################

        proc ModulesHelp { } {
          global _module_name

          puts stderr "The $_module_name modulefile customizes the MODULEPATH"
          puts stderr "environment variable, and loads custom modules, based"
          puts stderr "on group membership."
          puts stderr ""
        }

        set _module_name  [module-info name]

        module-whatis "custom module configuration based on group membership"

        switch -exact $env(USER) {
          "root" { }
          default {
            prepend-path  MODULEPATH  /sw/apps/modules
            prepend-path  MODULEPATH  /sw/system/modules

            set  envdirapps    /sw/apps/private
            set  envdirsystem  /sw/system/private
            set  groups  [ exec groups ]

            # TO DO: figure out how to load and unload the sub-modules as appropriate
            #        depending on whether THIS module is being unloaded or loaded

            # set /sw/apps/private/<group>/ paths
            foreach g $groups {
              if { [ file exists $envdirapps/$g ] } {
        #        module load $envdirapps/$g
                prepend-path MODULEPATH $envdirapps/$g/modules
                module load config.$g
              }
            }

            # set /sw/system/private/<group>/ paths
            foreach g $groups {
              if { [ file exists $envdirsystem/$g ] } {
        #        module load $envdirsystem/$g
                prepend-path MODULEPATH $envdirsystem/$g/modules
                module load config.$g
              }
            }
          }
        }
    manage: true
  "/usr/share/modulefiles/Core/StdEnv.lua":
    data:
      content: |
        -- -*- lua -*-
        whatis("Description: Load system standard modules")
        load("lmod", "group_paths")
    manage: true
  "/usr/share/modulefiles/Site/SitePackage.lua":
    data:
      content: |
        --------------------------------------------------------------------------
        -- taken from https://lmod.readthedocs.io/en/latest/300_tracking_module_usage.html
        -- load_hook(): Here we record the any modules loaded.

        local hook    = require("Hook")
        local uname   = require("posix").uname
        local cosmic  = require("Cosmic"):singleton()
        local syshost = cosmic:value("LMOD_SYSHOST")

        local s_msgA = {}

        local function load_hook(t)
           -- the arg t is a table:
           --     t.modFullName:  the module full name: (i.e: gcc/4.7.2)
           --     t.fn:           The file name: (i.e /apps/modulefiles/Core/gcc/4.7.2.lua)

           -- use syshost from configuration if set
           -- otherwise extract 2nd name from hostname: i.e. login1.stampede2.tacc.utexas.edu
           local host        = syshost
           if (not host) then
              local i,j, first
              i,j, first, host = uname("%n"):find("([^.]*)%.([^.]*)%.")
           end


           if (mode() ~= "load") then return end
           local msg         = string.format("user=%s module=%s path=%s host=%s time=%f",
                                             os.getenv("USER"), t.modFullName, t.fn, uname("%n"),
                                             epoch())
           local a           = s_msgA
           a[#a+1]           = msg
        end

        hook.register("load", load_hook)

        local function report_loads()
           local a = s_msgA
           for i = 1,#a do
              local msg = a[i]
              lmod_system_execute("logger -t ModuleUsageTracking -p local0.info " .. msg)
           end
        end

        ExitHookA.register(report_loads)
    manage: true
